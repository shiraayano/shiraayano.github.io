<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>白綾乃的博客</title><link>https://blog.adouzi.eu.org</link><description>永远相信，美好的事情即将发生！</description><copyright>白綾乃的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/69860501?v=4</url><title>avatar</title><link>https://blog.adouzi.eu.org</link></image><lastBuildDate>Sun, 01 Dec 2024 10:45:55 +0000</lastBuildDate><managingEditor>白綾乃的博客</managingEditor><ttl>60</ttl><webMaster>白綾乃的博客</webMaster><item><title>Java 学习笔记 SSM IoC</title><link>https://blog.adouzi.eu.org/post/34.html</link><description>&#13;
# Spring 框架学习笔记&#13;
&#13;
## 什么是框架？&#13;
框架是一种应用程序内部预设了常见问题解决方案的工具。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/34.html</guid><pubDate>Sun, 01 Dec 2024 10:45:29 +0000</pubDate></item><item><title>解决 IDEA 代码提示缓慢，有延迟的问题</title><link>https://blog.adouzi.eu.org/post/33.html</link><description>#### 笔者在使用idea中发现代码提示几乎不可用，出现提示缓慢等问题&#13;
&#13;
- 找到idea的安装目录&#13;
![image](https://github.com/user-attachments/assets/13672396-cf64-4729-b325-a2e4aac4c77b)&#13;
    - 目录下有 `idea.properties`文件&#13;
&#13;
- 添加以下配置（按照自己电脑配置量力而行哦 配置够的话无脑加大）&#13;
```java&#13;
-Xms4096m&#13;
-Xmx20480m&#13;
-XX:ReservedCodeCacheSize=2048m&#13;
-XX:+IgnoreUnrecognizedVMOptions&#13;
-XX:+UseG1GC&#13;
-XX:SoftRefLRUPolicyMSPerMB=50&#13;
-XX:CICompilerCount=2&#13;
-XX:+HeapDumpOnOutOfMemoryError&#13;
-XX:-OmitStackTraceInFastThrow&#13;
-ea&#13;
-Dsun.io.useCanonCaches=false&#13;
-Djdk.http.auth.tunneling.disabledSchemes=''&#13;
-Djdk.attach.allowAttachSelf=true&#13;
-Djdk.module.illegalAccess.silent=true&#13;
-Dkotlinx.coroutines.debug=off&#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/a5207c17-b941-4054-be83-5c9afbbbef20)&#13;
&#13;
---&#13;
&#13;
#### 现在代码提示秒出&#13;
![image](https://github.com/user-attachments/assets/eb4c594c-fe62-4c42-abde-1e3e9b30fea1)&#13;
&#13;
。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/33.html</guid><pubDate>Fri, 29 Nov 2024 12:01:31 +0000</pubDate></item><item><title>电子工程师学习笔记 01</title><link>https://blog.adouzi.eu.org/post/32.html</link><description>### 陆续整理电子制作工艺的笔记了，与其在笔记软件里头吃灰，为什么不整理出来复习一遍呢~？&#13;
#### 格式有点乱，后期可能会有所调整&#13;
&#13;
---&#13;
&#13;
第一章&#13;
&#13;
&#13;
&#13;
电路小白;尽量别碰市电220V~&#13;
&#13;
人体安全电压:交流电压36V，交流电流10mA&#13;
&#13;
在家做实验最好买一个直流稳压电源&#13;
&#13;
另外注意，电压不可怕，可怕的是电流流过身体&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731946924006-e9f68347-16c9-48f0-a533-f0937dbe1a1d.png)&#13;
&#13;
非要用手使用手背碰&#13;
&#13;
因为被电手会收缩&#13;
&#13;
&#13;
&#13;
不要用双手，![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731947009141-78de5303-a4be-4e0b-9985-9a60ec2e4d26.png)&#13;
&#13;
尽量用右手(偏心)&#13;
&#13;
&#13;
&#13;
&#13;
2 欧姆定律&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731947372045-e1b4e505-24af-4413-9022-1fbeb98f3d81.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731947739204-f0b54b02-39fe-4d5f-8fd1-1b4e21416d2b.png)&#13;
&#13;
com 参考端 一般接黑&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731947936015-3dd8536a-dee1-496a-beee-24ef021ff820.png)&#13;
&#13;
万用表也有电阻，可能会影响测量值&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
3 电阻阻值识别&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731948052621-bbd4e44a-84bd-4c0e-ac52-334bdbce2dd0.png)&#13;
&#13;
现实中买到的都是非理想元器件，不可能完全准确&#13;
&#13;
&#13;
&#13;
色环、插件电阻&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731948124735-29be7046-e481-41f0-b472-a0e9921618bc.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731948144604-16de1494-0d9b-4e11-82fa-d8e9ca493f26.png)&#13;
&#13;
&#13;
&#13;
前面表示阻值大小 最后一位表示精度&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731948286352-2b3463fe-1016-43d7-9127-87a563083f25.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
贴片电阻&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731948416721-0bdb6eaa-3987-49ef-a6a3-a55359e98b61.png)&#13;
&#13;
&#13;
&#13;
最后一位是10的n次方&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
30R9 -&gt; 30.9欧&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731948467421-6cbff3e7-015a-4f78-a8f1-b63d18f4d96d.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
5 电阻的功率&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731948556087-e77c42e1-0662-4b24-ae43-e3c1d9ae9b06.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
点亮一颗电阻&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731948680059-cb48164b-1627-4235-b9c9-c640fff820a2.png)&#13;
&#13;
&#13;
&#13;
电阻设计的功率不能超过额定功率&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
5 电阻的限流作用&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731948925090-497e561e-d16b-45ba-a34a-f856218a2c15.png)&#13;
&#13;
供电电压大于负载电压时，可以使用电阻限流&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731949187223-a18caa4a-b7f7-4bf1-95a6-e86f75321499.png)&#13;
&#13;
&#13;
&#13;
计算技巧&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731949287012-db8c9962-92f0-45f8-9f13-107eff41416e.png)&#13;
&#13;
v/mA = k欧&#13;
&#13;
v/MA = M 欧&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
6 电阻分流&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731986750255-31a14a02-ac09-4d92-b317-c2280787a087.png)&#13;
&#13;
&#13;
&#13;
拿电阻限流（不推荐）&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731986910697-7741df0c-e794-4245-a89a-4af027118679.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731986936202-a4d50e73-d304-487d-acdf-337aa90572f3.png)&#13;
&#13;
计算完后总电阻阻值不能变&#13;
&#13;
&#13;
&#13;
P= UI（计算需要分的功率）&#13;
&#13;
P/每个电阻额定功率 = 需要并联的电阻个数&#13;
&#13;
&#13;
&#13;
如果是拿10欧电阻计算的，那么并联之后电阻总阻值也应该为10欧&#13;
&#13;
&#13;
&#13;
7 电阻分压&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731987320395-81ca612a-a1cb-48ae-93d5-2c321d46d79a.png)&#13;
&#13;
使用多个电阻，每个电阻的功率很小&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731987375522-a09628d5-1243-45c4-80a9-fa3b3217ed46.png)&#13;
&#13;
&#13;
&#13;
中学时学的电路默认V2为0&#13;
&#13;
现实中很多时候并不为0&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
8 电容&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731987604338-e2defdf4-999c-4915-a246-c52e0a174cd9.png)&#13;
&#13;
上节课的错误，时R2不是R1&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731987667083-214bc230-042d-460e-a709-e4d20ca677e7.png)&#13;
&#13;
&#13;
&#13;
用电解液浸泡后的绝缘材料&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731987746340-baaed619-c72c-4b72-8524-82262be35c99.png)&#13;
&#13;
&#13;
&#13;
电解电容接反会炸&#13;
&#13;
当反向电压达到一定值时，电流会快速增大&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731987883361-ea85789a-66e7-402b-82b8-dae6501346cc.png)&#13;
&#13;
里面发生了化学反应&#13;
&#13;
&#13;
&#13;
如果是反向低压则是慢慢发生化学反应换掉&#13;
&#13;
&#13;
&#13;
总结&#13;
&#13;
上电前注意是否反接&#13;
&#13;
是否超过额定电压&#13;
&#13;
&#13;
&#13;
8 常见电容特性&#13;
&#13;
&#13;
&#13;
cbb电容&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731988092556-6a244eac-cd30-4125-b4fb-04c42957e7c1.png)&#13;
&#13;
耐压高，不分正反，高频好&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731988139777-ad35ceaa-ca3a-4915-b060-8c2b8dc3d2c7.png)&#13;
&#13;
ESL低高频特性好&#13;
&#13;
&#13;
&#13;
点解电容电解液会挥发，温度越高寿命越短&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
9  电容两端的电压不能突变&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731988273901-dd6b4591-5a9f-4641-96b5-de3aa59bb364.png)&#13;
&#13;
想改变电容两端的电压就必须要充放电 &#13;
&#13;
而充电/放电需要时间&#13;
&#13;
&#13;
&#13;
但是两端可以同时突变&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732005936413-b1bd2d33-a5a7-4743-8b4e-8106e71689ae.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732006131994-970c841a-121b-4285-84fb-4d5a82edd2bc.png)&#13;
&#13;
。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/32.html</guid><pubDate>Thu, 28 Nov 2024 15:57:58 +0000</pubDate></item><item><title>Java 学习笔记 SSM Maven</title><link>https://blog.adouzi.eu.org/post/31.html</link><description>---&#13;
&#13;
# SSM 学习路线&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732592789529-bd202c5e-aa1b-49a6-a86f-0eae2faad248.png)&#13;
&#13;
**课程笔记**：  &#13;
[https://www.wolai.com/fbnhGx8eE9JfZugFpbCWmC](https://www.wolai.com/fbnhGx8eE9JfZugFpbCWmC)&#13;
&#13;
---&#13;
&#13;
## Maven简介&#13;
### 什么是Maven？&#13;
Maven 是一个基于 Java 的项目管理和构建工具，通过项目对象模型（POM, Project Object Model）描述项目的构建过程，涵盖编译、测试、打包等阶段，提供了丰富的插件和依赖机制，实现对 Java 项目的自动化管理。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/31.html</guid><pubDate>Wed, 27 Nov 2024 15:55:56 +0000</pubDate></item><item><title>ESP32 MicroPython 驱动tft彩屏</title><link>https://blog.adouzi.eu.org/post/30.html</link><description>![IMG_20241125_235339](https://github.com/user-attachments/assets/edae1194-dda4-4994-ba82-25a2e121016f)&#13;
&#13;
### 接线说明&#13;
- **3V3 (或 5V)** -&gt; VCC 屏幕电源&#13;
- **GND** -&gt; GND 屏幕地线&#13;
- **GPIO13** -&gt; SCL SPI 时钟信号 (SCK)&#13;
- **GPIO12** -&gt; SDA SPI 数据信号 (MOSI)&#13;
- **GPIO27** -&gt; DC 数据/命令选择信号&#13;
- **GPIO26** -&gt; CS SPI 片选信号&#13;
- **GPIO25** -&gt; BL 背光控制信号&#13;
- **GPIO14** -&gt; RES 屏幕复位信号&#13;
&#13;
![IMG_20241126_000644](https://github.com/user-attachments/assets/b23046d9-c9bf-456d-85b9-101cc9357cdf)&#13;
![IMG_20241126_010043](https://github.com/user-attachments/assets/eb7030ab-3bf7-48fb-b8f8-f2413a840491)&#13;
&#13;
&#13;
```python&#13;
from machine import Pin, SPI&#13;
from lib import st7789py as st&#13;
from package import vga1_16x32 as font&#13;
from package import font_gb_16x16 as font_gb&#13;
import time&#13;
&#13;
# 接线说明：&#13;
# 3V3 (或 5V) -&gt; VCC    屏幕电源&#13;
# GND        -&gt; GND    屏幕地线&#13;
# GPIO13     -&gt; SCL    SPI 时钟信号 (SCK)&#13;
# GPIO12     -&gt; SDA    SPI 数据信号 (MOSI)&#13;
# GPIO27     -&gt; DC     数据/命令选择信号&#13;
# GPIO26     -&gt; CS     SPI 片选信号&#13;
# GPIO25     -&gt; BL     背光控制信号&#13;
# GPIO14     -&gt; RES    屏幕复位信号&#13;
&#13;
class Display:&#13;
    def __init__(self):&#13;
        # 初始化 SPI 和 ST7789 显示屏驱动&#13;
        self.tft = st.ST7789(&#13;
            SPI(2, baudrate=10000000, sck=Pin(13), mosi=Pin(12)),  # 使用 SPI2，总线速率为 10MHz&#13;
            width=320, height=240,     # 屏幕分辨率 320x240&#13;
            reset=Pin(14),             # RES 引脚：复位屏幕&#13;
            dc=Pin(27),                # DC 引脚：数据/命令选择&#13;
            cs=Pin(26),                # CS 引脚：SPI 片选&#13;
            backlight=Pin(25),         # BL 引脚：背光控制&#13;
            rotation=0                 # 屏幕旋转角度（0 表示默认方向）&#13;
        )&#13;
        # 定义常用颜色&#13;
        self.WHITE = st.color565(255, 255, 255)  # 白色&#13;
        self.BLACK = st.color565(0, 0, 0)        # 黑色&#13;
        self.RED = st.color565(255, 0, 0)        # 红色&#13;
        self.GREEN = st.color565(0, 255, 0)      # 绿色&#13;
        self.BLUE = st.color565(0, 0, 255)       # 蓝色&#13;
        self.DARK_BLUE = st.color565(0, 0, 128)  # 深蓝色&#13;
        self.YELLOW = st.color565(255, 255, 0)   # 黄色&#13;
&#13;
        # 初始化显示内容&#13;
        self.last_time = ''  # 记录上次显示的时间，用于更新显示&#13;
&#13;
        self.init_show()&#13;
&#13;
    def init_show(self):&#13;
        '''初始化屏幕显示'''&#13;
        self.tft.fill(self.DARK_BLUE)  # 清空屏幕，背景填充为深蓝色&#13;
        self.draw_border()  # 绘制边框&#13;
        self.text_gb('大雨', 130, 60)  # 显示中文文本&#13;
        self.text('Hello World!', 80, 120)  # 显示英文文本&#13;
        self.show_time(time.localtime())  # 显示当前时间&#13;
&#13;
    def draw_border(self):&#13;
        '''绘制屏幕边框'''&#13;
        self.tft.rect(0, 0, 320, 240, self.WHITE)  # 绘制外边框&#13;
        self.tft.hline(0, 50, 320, self.WHITE)  # 分隔线上方横线&#13;
        self.tft.hline(0, 180, 320, self.WHITE)  # 分隔线下方横线&#13;
&#13;
    def text_gb(self, text, x, y):&#13;
        '''显示中文文本'''&#13;
        self.tft.text_gb32(font_gb, 32, text, x, y, self.WHITE, self.DARK_BLUE)&#13;
&#13;
    def text(self, text, x, y):&#13;
        '''显示英文文本'''&#13;
        self.tft.text(font, 32, text, x, y, self.GREEN, self.DARK_BLUE)&#13;
&#13;
    def show_time(self, t):&#13;
        '''更新屏幕上的时间显示'''&#13;
        hour, minute, second = t[3], t[4], t[5]&#13;
        time_str = f'{hour:02}:{minute:02}:{second:02}'&#13;
&#13;
        # 如果时间未发生变化，则不刷新&#13;
        if time_str != self.last_time:&#13;
            self.tft.fill_rect(50, 190, 220, 40, self.DARK_BLUE)  # 清空时间区域&#13;
            self.tft.text(font, 32, time_str, 100, 190, self.YELLOW)  # 显示时间&#13;
            self.last_time = time_str&#13;
&#13;
    def run(self):&#13;
        '''主循环：实时更新时间'''&#13;
        while True:&#13;
            t = time.localtime()  # 获取当前时间&#13;
            self.show_time(t)     # 显示时间&#13;
            time.sleep(0.5)       # 每 0.5 秒刷新一次&#13;
&#13;
# 创建 Display 实例并运行&#13;
D = Display()&#13;
D.run()&#13;
```&#13;
&#13;
---&#13;
&#13;
笔者由于灯光太暗，老眼昏花，在调试的时候将VCC和GND接反了，然后冒烟了...悲&#13;
三极管时控制屏幕亮暗的，还活着&#13;
电容用电阻档还能测到阻值&#13;
难道是线烧了（？&#13;
下回看看能不能救回来&#13;
&#13;
11月28日&#13;
后续 &#13;
从料板拆了个三极管（去电创看到一堆废板子，从上边找了个同型号的管子换上）&#13;
![IMG_20241129_131621](https://github.com/user-attachments/assets/26f5188f-98ae-49a5-bee6-1c3fd428842b)&#13;
不能正常显示   &#13;
&#13;
于是换了个小屏幕接上&#13;
![IMG_20241129_131552](https://github.com/user-attachments/assets/0a473770-9eef-4876-a8cb-145d05bc7855)&#13;
![1732898216664-50583175](https://github.com/user-attachments/assets/10d131e2-f716-4a36-804e-77541c91487d)&#13;
题外话，博主11月30号又烧了块A988步进电机驱动板&#13;
求安慰QAQ&#13;
&#13;
---&#13;
&#13;
### 库文件&#13;
- [st7789py_mpy](https://github.com/russhughes/st7789py_mpy/blob/master/romfonts/)&#13;
- [MCU](https://gitcode.com/gh_mirrors/mc/MCU/blob/main/ST7789%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/lib)&#13;
- [ST7789 package](https://github.com/LC044/MCU/blob/main/ST7789/package/)&#13;
&#13;
### 建议阅读以下文章&#13;
- [microPython驱动tft屏幕显示中文终极解决方案](https://blog.csdn.net/weixin_42880082/article/details/126519543)&#13;
&#13;
### 推荐视频&#13;
- [Python+ESP32 快速上手（持续更新中）【 通俗易懂 】](https://www.bilibili.com/video/BV1G34y1E7tE/?p=10)。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/30.html</guid><pubDate>Mon, 25 Nov 2024 17:35:24 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 复习</title><link>https://blog.adouzi.eu.org/post/29.html</link><description># 复习&#13;
&#13;
- PS 累了 不调格式了，如果以后心情好调格式&#13;
&#13;
Java组件&#13;
JDK包含JRE&#13;
&#13;
都运行在JVM上&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732094896221-7d72cac5-a14a-49bf-9b4b-c9bf1394b493.png)&#13;
&#13;
&#13;
&#13;
编译字节码&#13;
&#13;
运行&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732094979568-28dcd581-ca32-46fb-aaa1-0dce659b38b8.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095013735-666c8eba-1d3c-46c5-819f-a762f7c447af.png)&#13;
&#13;
权限修饰符&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095084217-85c007b4-eb33-4857-9a84-5d7bf9f9627d.png)&#13;
&#13;
&#13;
&#13;
子类是通过继承来的&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095168396-e9a4b03c-4050-4532-9a29-feef0b046b61.png)&#13;
&#13;
Java单继承多态&#13;
&#13;
&#13;
&#13;
注释&#13;
&#13;
单行 多行 文档&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095298900-f30a22f8-dcd7-479c-be6b-e94d122a5800.png)&#13;
&#13;
java关键字&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095323301-041ce369-3ca2-4db0-bf0e-9e6b4f6070d6.png)&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095462582-5ca7f841-0455-40a0-bcd9-e4a7efc10160.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095372241-43205868-2c6c-4059-9f4b-adf7c6e1c308.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
 ![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095383997-d4223c0a-22c8-4f5a-bbea-526157719fff.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
#### 变量和常量&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095758190-e89d997c-356a-4e1e-8c7e-2964c72e0391.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095612337-262bac00-5124-48b3-9476-44d4a771aeef.png)&#13;
&#13;
定义类C，用new的方式使类实例化&#13;
&#13;
此时c是引用数据类型&#13;
&#13;
&#13;
&#13;
自动类型转换 从内存小的转成大的&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095812715-848dc56e-b257-4bbb-8926-d89de603c199.png)&#13;
&#13;
大转小需要强制类型转换&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095870443-e579e43c-357c-4eb5-9887-8bfe9d1739d0.png)&#13;
&#13;
常量使用final修饰&#13;
&#13;
类型转换&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732095999892-9f204eeb-8910-4080-96f5-e49e37626de8.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732096147003-07247150-e7b6-42a9-9a7f-63ddaecccc74.png)&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732096173860-c152b30a-8648-4331-bc47-0a5fefcaf01b.png)&#13;
&#13;
&#13;
&#13;
a&gt;3 return 0&#13;
&#13;
a !&gt;3 return 1&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732096271871-162ddbcc-1916-481d-a658-384b9523b5a3.png)&#13;
&#13;
&#13;
&#13;
示例&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732096384362-39df8498-1b26-4455-bb55-31f40f258efc.png)&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732096434154-8b770555-2aea-4f34-b783-94d1025e9f07.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732096752892-0b2d168b-bfd2-4443-8a86-b6c1984e8c59.png)&#13;
&#13;
遍历循环（增强for循环）&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732096901568-ae938319-fed4-4f5c-910f-b530232f6eac.png)&#13;
&#13;
&#13;
&#13;
#### 数组&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732096987205-f7a3fa84-f3bb-4609-965d-6c191a11ebd6.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732097051626-dd124d00-71d0-4b39-9dc4-84400319a9a9.png)&#13;
&#13;
三行两列 数组&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732097097332-fbc5573f-1742-4531-8e03-b0c38d669050.png)&#13;
&#13;
&#13;
&#13;
静态&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732097241750-c5a862c9-ab4c-46ad-bc40-7bc5f408b0f7.png)&#13;
&#13;
&#13;
&#13;
copyOf&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732097312068-5410212f-1284-4678-8af5-16de206f27e6.png)&#13;
&#13;
第一个传原数组&#13;
&#13;
第二个传要复制的长度&#13;
&#13;
&#13;
&#13;
数组排序&#13;
&#13;
Arrays.sort()&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732097390471-fa78fc70-f8b2-47f5-b159-a9ee18c557e4.png)&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732097411402-7ad247f2-9bdf-433b-bc2f-b6c6778912df.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
#### 输入输出&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102177665-99f68fc0-b0f4-4094-a144-15deba10bf9b.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102272716-31bc33dc-a451-4743-b732-36200b7cc49f.png)&#13;
&#13;
&#13;
&#13;
#### 类与对象&#13;
封装&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102312897-69a72829-88ea-447b-b929-784ce06471da.png)&#13;
&#13;
&#13;
&#13;
封装通过set和get方法访问&#13;
&#13;
外部无法直接访问 这就是封装&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102447791-ecb0b5ff-fddc-4735-839f-6557279a150c.png)&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102514953-9899e557-ec86-4c73-8eed-9b5d7f05a0b6.png)&#13;
&#13;
中括号表示可有可无&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102571090-cc5ac742-76d9-4f98-a0e2-05512dff364c.png)&#13;
&#13;
&#13;
&#13;
#### 继承&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102627513-c4ce57aa-86c2-445c-87bd-3b992f1caa91.png)&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102668661-6552b81d-e01b-43b3-b7da-74c5471e3207.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
默认继承Object类&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102722041-616d42b8-291e-488e-a96c-08c0d27b1357.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102785639-aadb3890-42c3-4912-98ec-1a0fbd31026e.png)&#13;
&#13;
重写父类的方法&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102846658-040a0a00-bac1-4cd1-82ae-12cb67df0f94.png)&#13;
&#13;
&#13;
&#13;
#### 类的封装&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102901436-225f0789-7a90-43d2-921e-f3baebeee69e.png)&#13;
&#13;
&#13;
&#13;
将传入的age赋值给private属性&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732102973900-aeb6d135-8863-4ad2-81b6-8d775cd03ffe.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732103320135-07bcae52-e7bd-4c37-b792-841b56eb774e.png)&#13;
&#13;
&#13;
&#13;
#### 构造方法&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732103538628-e6ab5fca-e07d-4542-b70c-aafa0ca545c8.png)&#13;
&#13;
&#13;
&#13;
构造方法相比于get，set 能一步到位&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732103796530-1a6f1eb7-642a-4ba9-949f-239385bb47d6.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
#### 方法的重载和重写&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732103926410-4c3f0cf0-e1c5-40ff-ab67-6b212cf03b32.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732103985674-4f3f61a0-9b78-4274-a157-63588cb79dd7.png)&#13;
&#13;
&#13;
&#13;
#### this关键字&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732104146433-2fc19295-2525-45dd-b904-baabdc886288.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
#### super关键字&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732104260101-46680380-1c38-4047-9765-fced67e49fc0.png)&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732104231249-0235354e-f6f9-4cae-b72b-e2fe4160b517.png)&#13;
&#13;
&#13;
&#13;
#### static关键字&#13;
静态&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732123949761-f58a1d4d-a12a-4927-95b5-9fc4afa61183.png)&#13;
&#13;
static代码块&#13;
&#13;
在类加载时先加载代码块，然后再进行类的初始化&#13;
&#13;
&#13;
&#13;
原来的代码&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124084607-fd16bd73-d67e-47dc-9cf2-2bbf0ccde773.png)&#13;
&#13;
&#13;
&#13;
使用static&#13;
&#13;
&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124068083-665f6e74-bb34-4b3f-8699-dfdc60258321.png)&#13;
&#13;
&#13;
&#13;
#### final（最终）关键字&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124118777-ff9d05b6-57bc-4de6-be1c-62a031b95e48.png)&#13;
&#13;
final修饰的类不能被继承&#13;
&#13;
final修饰的方法不能被重写&#13;
&#13;
基本遍历使用final修饰后就不可变了，引用变量不可变，但是引用的对象内容可以改变&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
##### 抽象类&#13;
abstract&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124403799-bd6581bd-bf33-4175-8c78-bdb8838e6e83.png)&#13;
&#13;
抽象方法不能有方法体&#13;
&#13;
子类继承时需要实现所有父类中的抽象方法&#13;
&#13;
&#13;
&#13;
#### 接口&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124437935-81015c7a-cc6e-4c6c-ab78-3014875e2bc8.png)&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124459993-281588ec-ebf6-450f-a39c-5b3533545fcc.png)&#13;
&#13;
变量都是共有静态常量&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124506992-0a21715f-499a-421c-a74b-ec19ae29977f.png)&#13;
&#13;
&#13;
&#13;
接口需要实现定义的所有方法&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124547381-d1a61099-d44d-41d8-812c-c2d913e75a8c.png)&#13;
&#13;
（类似于模板）&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124621808-4d157e01-af05-4256-969f-6c2cf6d51452.png)&#13;
&#13;
接口要被子类实现 抽象方类要被子类继承&#13;
&#13;
&#13;
&#13;
接口中的变量都为公共静态常量 抽象类中可以有普通变量&#13;
&#13;
接口中全方法的声明 抽象类中可以有方法的实现&#13;
&#13;
接口中不可有构造函数 抽象类中可以有构造函数&#13;
&#13;
接口为可多实现 而抽象类必须被单继承&#13;
&#13;
接口中方法为抽象方法 而抽象类中也可有非抽象方法&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
实现两个接口&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124941155-7fc5568a-7b3c-43f4-9e60-559a2f7b5e4c.png)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
继承只能继承一个&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1732124962750-02477e96-a580-4abe-8f41-5967f5a46512.png)&#13;
&#13;
。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/29.html</guid><pubDate>Mon, 25 Nov 2024 12:29:20 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 017 集合2</title><link>https://blog.adouzi.eu.org/post/28.html</link><description>&#13;
## 5. Collection子接口2：Set&#13;
1.Set及其实现类特点  &#13;
java.util.Collection:存储一个一个的数据  &#13;
-----子接口:Set:存储无序的、不可重复的数据(高中学习的集合)  &#13;
|---- HashSet;主要实现类 主要实现类，底层使用的是 HashMap，即使用数组+单向链表+红黑树结构进行存储（JDK8 中）  &#13;
I---- LinkedHashset 是 HashSet 的子类，再现有数组+单项列表+红黑树结构的基础上又添加了一组双向链表，用于记录添加元素的先后顺序。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/28.html</guid><pubDate>Mon, 25 Nov 2024 12:26:38 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 016 集合1</title><link>https://blog.adouzi.eu.org/post/27.html</link><description># &#13;
# 集合框架&#13;
&#13;
&#13;
## 1. 集合框架概述&#13;
内存层面需要针对于多个数据进行存储。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/27.html</guid><pubDate>Mon, 25 Nov 2024 12:25:44 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 015 网络</title><link>https://blog.adouzi.eu.org/post/26.html</link><description>### BS架构（Browser-Server架构）&#13;
**BS架构**，即Browser-Server架构，是一种基于浏览器和服务器的架构模式。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/26.html</guid><pubDate>Sun, 24 Nov 2024 10:16:58 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 014 集合工具类</title><link>https://blog.adouzi.eu.org/post/25.html</link><description>&#13;
&#13;
### Map 中的常用方法&#13;
#### 增&#13;
+ `put(Object key, Object value)`：添加键值对。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/25.html</guid><pubDate>Thu, 21 Nov 2024 13:48:24 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 013 新特性</title><link>https://blog.adouzi.eu.org/post/24.html</link><description>测试方式&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/49455411/1731933602728-b78e05ef-e607-4227-a83c-2cd748ffeb91.png)&#13;
&#13;
### DK版本的里程碑&#13;
+ **JDK 5.0**：引入了泛型、增强的for循环、自动装箱/拆箱、枚举类型、可变参数、静态导入、注解等。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/24.html</guid><pubDate>Thu, 21 Nov 2024 13:47:18 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 012 泛型</title><link>https://blog.adouzi.eu.org/post/23.html</link><description>泛型&#13;
&#13;
&#13;
&#13;
比喻 标签纸&#13;
&#13;
&#13;
&#13;
#### 什么是泛型？&#13;
泛型就是允许在自定义类，接口时通过一个 ` 标识 ` 表示类中的某个“属性的类型”或者是某个方法的“返回值或参数的类型”。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/23.html</guid><pubDate>Thu, 21 Nov 2024 13:46:14 +0000</pubDate></item><item><title>Java  学习笔记 基础篇 011 反射</title><link>https://blog.adouzi.eu.org/post/22.html</link><description>java&#13;
&#13;
```plain&#13;
public class NormalExample {&#13;
    public void sayHello() {&#13;
        System.out.println('Hello, World!');&#13;
    }&#13;
&#13;
    public static void main(String[] args) {&#13;
        // 正常方式创建对象并调用方法&#13;
        NormalExample example = new NormalExample();&#13;
        example.sayHello();&#13;
    }&#13;
}&#13;
```&#13;
&#13;
### 反射方式&#13;
java&#13;
&#13;
```plain&#13;
import java.lang.reflect.Method;&#13;
&#13;
public class ReflectionExample {&#13;
    public void sayHello() {&#13;
        System.out.println('Hello, World!');&#13;
    }&#13;
&#13;
    public static void main(String[] args) {&#13;
        try {&#13;
            // 反射方式创建对象并调用方法&#13;
            Class&lt;?&gt; clazz = Class.forName('ReflectionExample');&#13;
            Object instance = clazz.getDeclaredConstructor().newInstance();&#13;
            Method method = clazz.getMethod('sayHello');&#13;
            method.invoke(instance);&#13;
        } catch (Exception e) {&#13;
            e.printStackTrace();&#13;
        }&#13;
    }&#13;
}&#13;
```&#13;
&#13;
### 说明&#13;
1. **正常方式**：&#13;
    - 直接使用 `new` 关键字创建对象。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/22.html</guid><pubDate>Mon, 18 Nov 2024 15:44:52 +0000</pubDate></item><item><title>关于博客文章转载规则以及一些闲聊</title><link>https://blog.adouzi.eu.org/post/21.html</link><description>#### 转载请标明原作者&#13;
#### 转载请标明原作者!&#13;
#### 转载请标明原作者!&#13;
重要的事情说三遍&#13;
&#13;
&#13;
以及附上原文链接，注意，原文链接请直接指向本博客的原文地址，而不是带个域名转跳的那种&#13;
以下为示例 使用```&lt;a&gt;```标签&#13;
&#13;
```&#13;
原作者：shiraayano&#13;
&lt;a href = 'https://blog.adouzi.eu.org/post/21.html'&gt;原文地址：https://blog.adouzi.eu.org/post/21.html&lt;/a&gt;`&#13;
```&#13;
---&#13;
&#13;
原作者：shiraayano&#13;
&lt;a href = 'https://blog.adouzi.eu.org/post/21.html'&gt;原文地址：https://blog.adouzi.eu.org/post/21.html&lt;/a&gt;&#13;
&#13;
---&#13;
&#13;
这样可以搜索引擎中进行权重传递，如果带域名转跳则在搜索引擎中无法传递权重，可能会造成搜索转载的文章“顶替”原作者的情况&#13;
还有，笔者希望转载我的文章是基于“借鉴”而不是直接搬过去，我更希望我的文章出现在某篇博客结尾的参考列表或致谢中，而不是照搬全篇，希望有更多原创内容。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/21.html</guid><pubDate>Sun, 17 Nov 2024 09:38:52 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 010 IO相关</title><link>https://blog.adouzi.eu.org/post/20.html</link><description> &#13;
&#13;
### 1. File类的理解&#13;
+ **File类**位于`java.io`包下，本章中涉及到的相关流也都声明在`java.io`包下。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/20.html</guid><pubDate>Sat, 16 Nov 2024 13:49:09 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 009</title><link>https://blog.adouzi.eu.org/post/19.html</link><description>### 数据结构的逻辑关系&#13;
1. **线性结构**：一对一关系，例如数组和链表。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/19.html</guid><pubDate>Fri, 15 Nov 2024 13:48:26 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 008</title><link>https://blog.adouzi.eu.org/post/18.html</link><description>&#13;
### 2.2 StringBuilder、StringBuffer的API&#13;
StringBuilder、StringBuffer的API是完全一致的，并且很多方法与String相同。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/18.html</guid><pubDate>Sat, 09 Nov 2024 08:32:57 +0000</pubDate></item><item><title>Java学习笔记基础篇 007</title><link>https://blog.adouzi.eu.org/post/17.html</link><description>## 6. 再谈同步&#13;
### 6.1 单例设计模式的线程安全问题&#13;
#### 6.1.1 饿汉式没有线程安全问题&#13;
饿汉式：在类初始化时就直接创建单例对象，而类初始化过程是没有线程安全问题的&#13;
&#13;
形式一：&#13;
&#13;
```java&#13;
package com.atguigu.single.hungry;&#13;
&#13;
public class HungrySingle {&#13;
    private static HungrySingle INSTANCE = new HungrySingle(); //对象是否声明为final 都可以&#13;
    &#13;
    private HungrySingle(){}&#13;
    &#13;
    public static HungrySingle getInstance(){&#13;
        return INSTANCE;&#13;
    }&#13;
}&#13;
```&#13;
&#13;
形式二：&#13;
&#13;
```java&#13;
/*&#13;
public class HungryOne{&#13;
    public static final HungryOne INSTANCE = new HungryOne();&#13;
    private HungryOne(){}&#13;
}*/&#13;
&#13;
public enum HungryOne{&#13;
    INSTANCE&#13;
}&#13;
```&#13;
&#13;
测试类：&#13;
&#13;
```java&#13;
package com.atguigu.single.hungry;&#13;
&#13;
public class HungrySingleTest {&#13;
&#13;
    static HungrySingle hs1 = null;&#13;
    static HungrySingle hs2 = null;&#13;
&#13;
    //演示存在的线程安全问题&#13;
    public static void main(String[] args) {&#13;
&#13;
        Thread t1 = new Thread() {&#13;
            @Override&#13;
            public void run() {&#13;
                hs1 = HungrySingle.getInstance();&#13;
            }&#13;
        };&#13;
&#13;
        Thread t2 = new Thread() {&#13;
            @Override&#13;
            public void run() {&#13;
                hs2 = HungrySingle.getInstance();&#13;
            }&#13;
        };&#13;
&#13;
        t1.start();&#13;
        t2.start();&#13;
&#13;
        try {&#13;
            t1.join();&#13;
        } catch (InterruptedException e) {&#13;
            e.printStackTrace();&#13;
        }&#13;
        try {&#13;
            t2.join();&#13;
        } catch (InterruptedException e) {&#13;
            e.printStackTrace();&#13;
        }&#13;
&#13;
        System.out.println(hs1);&#13;
        System.out.println(hs2);&#13;
        System.out.println(hs1 == hs2);//true&#13;
    }&#13;
&#13;
}&#13;
```&#13;
&#13;
#### 6.1.2 懒汉式线程安全问题&#13;
懒汉式：延迟创建对象，第一次调用getInstance方法再创建对象&#13;
&#13;
形式一：&#13;
&#13;
```java&#13;
package com.atguigu.single.lazy;&#13;
&#13;
public class LazyOne {&#13;
    private static LazyOne instance;&#13;
&#13;
    private LazyOne(){}&#13;
&#13;
    //方式1：&#13;
    public static synchronized LazyOne getInstance1(){&#13;
        if(instance == null){&#13;
            instance = new LazyOne();&#13;
        }&#13;
        return instance;&#13;
    }&#13;
    //方式2：&#13;
    public static LazyOne getInstance2(){&#13;
        synchronized(LazyOne.class) {&#13;
            if (instance == null) {&#13;
                instance = new LazyOne();&#13;
            }&#13;
            return instance;&#13;
        }&#13;
    }&#13;
    //方式3：&#13;
    public static LazyOne getInstance3(){&#13;
        if(instance == null){&#13;
            synchronized (LazyOne.class) {&#13;
                try {&#13;
                    Thread.sleep(10);//加这个代码，暴露问题&#13;
                } catch (InterruptedException e) {&#13;
                    e.printStackTrace();&#13;
                }&#13;
                if(instance == null){&#13;
                    instance = new LazyOne();&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return instance;&#13;
    }&#13;
    /*&#13;
    注意：上述方式3中，有指令重排问题&#13;
    mem = allocate(); 为单例对象分配内存空间&#13;
    instance = mem;   instance引用现在非空，但还未初始化&#13;
    ctorSingleton(instance); 为单例对象通过instance调用构造器&#13;
    从JDK2开始，分配空间、初始化、调用构造器会在线程的工作存储区一次性完成，然后复制到主存储区。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/17.html</guid><pubDate>Sat, 09 Nov 2024 08:30:07 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 006</title><link>https://blog.adouzi.eu.org/post/16.html</link><description># 第10章_多线程&#13;
&#13;
线程的创建方式一:继承Thread类&#13;
&#13;
步骤:&#13;
&#13;
创建一个继承于Thread类的子类&#13;
&#13;
重写Thread类的run()---&gt;将此线程要执行的操作，声明在此方法体中&#13;
&#13;
创建当前Thread的子类的对象&#13;
&#13;
通过对象调用start()&#13;
&#13;
&#13;
我们之前学习的程序在没有跳转语句的情况下，都是由上至下沿着一条路径依次执行。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/16.html</guid><pubDate>Sat, 09 Nov 2024 08:28:41 +0000</pubDate></item><item><title>Java学习笔记 基础篇 005</title><link>https://blog.adouzi.eu.org/post/15.html</link><description>&#13;
&#13;
## 10. 注解(Annotation)&#13;
### 10.1 注解概述&#13;
#### 10.1.1 什么是注解&#13;
注解（Annotation）是从`JDK5.0`开始引入，以“`@注解名`”在代码中存在。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/15.html</guid><pubDate>Sat, 09 Nov 2024 08:11:01 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 004</title><link>https://blog.adouzi.eu.org/post/14.html</link><description>## 1. 关键字：static&#13;
&#13;
&#13;
static 关键字的使用&#13;
&#13;
static 静态的   用来修饰的结构，属性，方法：代码块，内部类；&#13;
&#13;
代码示例&#13;
&#13;
```java&#13;
public class ChineseTest {&#13;
    public static void main(String[] args) {&#13;
        Chinese c = new Chinese();&#13;
        c.name = '张三';&#13;
        c.age = 20;&#13;
&#13;
        Chinese c2 = new Chinese();&#13;
        c2.name = '李四';&#13;
        c2.age = 30;&#13;
&#13;
        System.out.println(c);&#13;
        System.out.println(c2);&#13;
&#13;
        System.out.println('++++++++++++++++++++++');&#13;
        System.out.println(c.country);&#13;
        System.out.println(c2.country);&#13;
&#13;
        c2.country = '中国';&#13;
&#13;
        System.out.println('++++++++++++++++++++++');&#13;
        System.out.println(c.country);&#13;
        System.out.println(c2.country);&#13;
&#13;
        //我们这里更改c2,可以发现c1的值也遭到了变更&#13;
        //因为country是静态变量,属于类,不属于某个对象&#13;
&#13;
&#13;
        //静态变量在内存中只有一份,被所有对象共享&#13;
        //非静态变量在内存中有几份,取决于对象有多少份&#13;
        //静态变量可以通过类名直接访问,也可以通过对象名访问&#13;
        //非静态变量只能通过对象名访问&#13;
        //静态变量和非静态变量,访问时,优先使用非静态变量&#13;
        &#13;
    }&#13;
}&#13;
class Chinese {//中国人 类&#13;
    //非静态变量,实例变量&#13;
    String name;&#13;
    int age;&#13;
    //静态变量,类变量&#13;
&#13;
    static String country = 'China';&#13;
    //非静态方法,实例方法&#13;
&#13;
    public void sayHello() {&#13;
        System.out.println('你好,我是' + name);&#13;
    }&#13;
&#13;
    //快捷键alt insert&#13;
    @Override&#13;
    public String toString() {&#13;
        // TODO Auto-generated method stub&#13;
        //return super.toString();&#13;
        return 'Chinese{'+'name='+name+',age='+age+'}';&#13;
    }&#13;
&#13;
    &#13;
    &#13;
    &#13;
&#13;
}&#13;
```&#13;
&#13;
&#13;
&#13;
3 2  &#13;
静态变量:类中的属性使用static进行修饰。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/14.html</guid><pubDate>Sat, 09 Nov 2024 08:07:13 +0000</pubDate></item><item><title>vscode 错误 找不到或无法加载主类 解决方案</title><link>https://blog.adouzi.eu.org/post/13.html</link><description>笔者在用vscode写java代码中遇到了“错误 找不到或无法加载主类”报错&#13;
![image](https://github.com/user-attachments/assets/b984ddde-1953-459d-aa34-115050a9128f)&#13;
&#13;
尝试重装插件，无效果&#13;
解决法案&#13;
![bc29ae3ad03052c86c73ae04360335cf](https://github.com/user-attachments/assets/63f3a535-b18c-44f4-9ec7-e7d531ccd803)&#13;
&#13;
JAVA PROJECTS - 更多操作 - 清理工作空间&#13;
。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/13.html</guid><pubDate>Thu, 07 Nov 2024 11:04:37 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 003</title><link>https://blog.adouzi.eu.org/post/12.html</link><description># 递归&#13;
# 面向对象&#13;
&#13;
### 面向对象编程（OOP）笔记&#13;
&#13;
![image (54)](https://github.com/user-attachments/assets/a651492b-5e75-4e2f-ad61-cbcf4dc2cbe8)&#13;
&#13;
&#13;
#### Java类及类的成员&#13;
1. **类的成员**&#13;
   - **属性**：定义对象的状态和特征（通常称为类的字段或成员变量）。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/12.html</guid><pubDate>Mon, 28 Oct 2024 14:08:36 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 002</title><link>https://blog.adouzi.eu.org/post/11.html</link><description>&#13;
---&#13;
&#13;
### 1. 算术运算符&#13;
&#13;
用于进行基本的数学运算，包括加法、减法、乘法、除法、取模等。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/11.html</guid><pubDate>Fri, 25 Oct 2024 11:35:15 +0000</pubDate></item><item><title>Java 学习笔记 基础篇 001</title><link>https://blog.adouzi.eu.org/post/10.html</link><description>## HelloWorld 示例&#13;
&#13;
编写第一个Java程序：&#13;
&#13;
```java&#13;
class HelloChina {&#13;
    public static void main(String[] args) {&#13;
        System.out.println('你好，世界！');&#13;
    }&#13;
}&#13;
```&#13;
&#13;
### 编译和运行步骤&#13;
&#13;
1. 编译：使用 `javac` 命令编译 Java 源文件：&#13;
    ```bash&#13;
    javac HelloChina.java&#13;
    ```&#13;
&#13;
2. 生成的字节码文件：编译后会生成一个名为 `HelloChina.class` 的字节码文件。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/10.html</guid><pubDate>Sun, 20 Oct 2024 12:08:24 +0000</pubDate></item><item><title>ESP32 MicroPython 开发环境配置</title><link>https://blog.adouzi.eu.org/post/9.html</link><description>## 1. 环境配置篇&#13;
![image](https://github.com/user-attachments/assets/272e376e-765a-4b8a-b49a-5640fb089cb3)&#13;
&#13;
### 1.1 设置 IO 功能&#13;
在配置完 IO 功能后，只有一种功能会被激活。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/9.html</guid><pubDate>Wed, 16 Oct 2024 13:55:10 +0000</pubDate></item><item><title>windows出现pin无法使用的无损救砖方法</title><link>https://blog.adouzi.eu.org/post/8.html</link><description>&#13;
## 操作步骤&#13;
&#13;
1. **进入安全模式**&#13;
   - 按住 **Shift** 键，点击 **重启** 进入蓝色的安全界面。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/8.html</guid><pubDate>Tue, 24 Sep 2024 02:48:03 +0000</pubDate></item><item><title>【游戏】和朋友玩原神拍的皮影戏</title><link>https://blog.adouzi.eu.org/post/7.html</link><description># 最喜欢看贴贴了，嘿嘿嘿~(●ˇ∀ˇ●)~&#13;
###### 发电发言请无视&#13;
&#13;
&#13;
&#13;
![20240824183605](https://github.com/user-attachments/assets/a5a2e318-85fb-48d1-a0cd-072ff890ac5a)&#13;
![20240824183737](https://github.com/user-attachments/assets/2605594e-bccb-4286-ab80-41d071fd47e5)&#13;
![20240824183743](https://github.com/user-attachments/assets/8ebb825f-c487-434a-b933-716832e784b3)&#13;
![20240824184005](https://github.com/user-attachments/assets/56be4961-6361-4465-b03c-dc41583ebc83)&#13;
![20240824184107](https://github.com/user-attachments/assets/fe3164a7-7ab7-4b75-bf15-a7ff059e2b1b)&#13;
![20240824184146](https://github.com/user-attachments/assets/2bda7abd-a0e6-42cd-b959-62ccae553bfa)&#13;
![20240824184156](https://github.com/user-attachments/assets/dff96981-4100-4a01-afbb-60631b1e5d83)&#13;
![20240824184401](https://github.com/user-attachments/assets/3dddce77-92e4-428c-a5a2-f5e26431aae7)&#13;
![20240824184530](https://github.com/user-attachments/assets/42f4fb4c-d48b-44ad-9a15-2578bbdf2b77)&#13;
![20240824184534](https://github.com/user-attachments/assets/73dcd800-5a3b-4aad-b30d-06b651b6a00b)&#13;
![20240824184606](https://github.com/user-attachments/assets/3e362ba1-774b-484e-894c-5e32cb142a23)&#13;
![20240824184612](https://github.com/user-attachments/assets/bd66b65d-6b7c-4ae0-b8a7-0beaf3904230)&#13;
![20240824184627](https://github.com/user-attachments/assets/ac3a918d-adb9-4d1a-8152-c77b03b99d9c)&#13;
![20240824185905](https://github.com/user-attachments/assets/f424c32c-29e6-42a5-8be7-e8480047b107)&#13;
![20240824190021](https://github.com/user-attachments/assets/8028d978-b116-4b0e-bcde-6a438deb7669)&#13;
![20240824190051](https://github.com/user-attachments/assets/06028217-c115-4e69-8101-dfd3a3850b44)&#13;
![20240824190357](https://github.com/user-attachments/assets/a5c31c30-a020-4df9-aec9-7e80715ca48d)&#13;
![20240824190541](https://github.com/user-attachments/assets/c0e2ae41-56f2-41a5-96b6-3417a175cd24)&#13;
![20240824190608](https://github.com/user-attachments/assets/753ae8f5-245c-42ea-ad7e-8dce212c10e1)&#13;
![20240824182448](https://github.com/user-attachments/assets/c0e4859e-ef67-430c-ac3c-360b2c5165ff)&#13;
![20240824183152](https://github.com/user-attachments/assets/76483cc4-4c28-48e1-9922-8fe83dad7f23)&#13;
![20240824183258](https://github.com/user-attachments/assets/1debc49d-5fdc-488a-8564-bbd166492f1f)&#13;
![20240824183307](https://github.com/user-attachments/assets/b5b9a1a8-79f4-4f25-ad1b-d4d63e724b3a)&#13;
&#13;
&#13;
# 连续剧&#13;
![20240824195705](https://github.com/user-attachments/assets/2708cf7c-a5f7-4a0c-b01a-904cb6ad23b9)&#13;
![20240824195710](https://github.com/user-attachments/assets/2cf704e2-424a-4d81-9934-6bda75e110cf)&#13;
![20240824195724](https://github.com/user-attachments/assets/af9a9665-d9be-4446-8fe8-6d6118ce0974)&#13;
![20240824195740](https://github.com/user-attachments/assets/b600b06b-4b89-47b5-a6f7-5c914fdf130d)&#13;
![20240824195801](https://github.com/user-attachments/assets/c8da61b8-62ce-445f-ac71-9a1d067b3487)&#13;
![20240824195806](https://github.com/user-attachments/assets/66d0a898-1767-485b-b8c0-7ccb8f68364e)&#13;
![20240824195811](https://github.com/user-attachments/assets/f282ebc1-7e63-4cc2-bb33-78a1448d93b7)&#13;
![20240824195818](https://github.com/user-attachments/assets/898b834b-4894-4bcd-b41a-eaa8cbb574eb)&#13;
![20240824195904](https://github.com/user-attachments/assets/d8b65b5a-96df-4742-9070-c4ea7ef79721)&#13;
![20240824200018](https://github.com/user-attachments/assets/aa4f1f5e-0dcb-4668-ba5a-855302e67218)&#13;
![20240824195617](https://github.com/user-attachments/assets/2455cecf-3983-4885-bb3e-b9f7da0ac9f0)&#13;
![20240824195625](https://github.com/user-attachments/assets/fae628c2-3e20-43b7-925b-43f2fb03befe)&#13;
&#13;
&#13;
&#13;
# 朋友拍的图&#13;
&#13;
![2B7E9DF5CB2288AA6B107A15287418A0](https://github.com/user-attachments/assets/7e68e7ff-6576-4b4a-af6a-3276e0afabbb)&#13;
![73E3DCAFAD79AE8F3B9CD8F1D2DC589D](https://github.com/user-attachments/assets/9e806100-0a86-432a-969c-6e7fe092d9d0)&#13;
![321AE2695DFC14F6E0C0705ECE5F96E1](https://github.com/user-attachments/assets/2cf2ff8e-a8ed-4c2a-936a-a37e0c00afec)&#13;
![340C7AB712E4A6E2C7F2EF8589C93EB5](https://github.com/user-attachments/assets/6f181efa-ebec-4d31-acf7-d644dc37f09d)&#13;
![62843332133E0F15C81B6CA6098CE36E](https://github.com/user-attachments/assets/d52a4726-dc32-4bd9-ae17-9fc0993fad53)&#13;
![A5B1A81F80D97222B203CAF4C29D882C](https://github.com/user-attachments/assets/6b67c51a-91f6-42e3-97e6-ae0adc0c6c18)&#13;
![AAA85208FC2A316F0D954DA5A4338CE8](https://github.com/user-attachments/assets/dc8ee36b-fd1f-4b84-8b13-82c75be39c5e)&#13;
![D5771E8F5B99468A93DAB8DE8157CD87](https://github.com/user-attachments/assets/48f1e1f7-a42e-4e57-95ee-ec72e054cbc7)&#13;
![F1A998F1B25E244D72223DBF8AF7CB1C](https://github.com/user-attachments/assets/360e4029-8f33-40e8-af8c-eef1807032c7)&#13;
![F2436559D8909755E161DEC421B58C95](https://github.com/user-attachments/assets/447d495d-4fe0-4c6e-b7af-441576bc738f)&#13;
![FD22FA28D8397D114AADCC59B826094B](https://github.com/user-attachments/assets/04eb9b69-4ed2-475a-b392-168591c855dd)&#13;
。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/7.html</guid><pubDate>Sat, 31 Aug 2024 05:05:14 +0000</pubDate></item><item><title>关于Vocaloid5/6编辑器不能加载低版本声库解决方案</title><link>https://blog.adouzi.eu.org/post/6.html</link><description>## 如何处理 Vocaloid 声库的注册表数据&#13;
&#13;
在使用 Vocaloid 编辑器时，有时我们需要将不同版本的声库数据迁移或更新注册表路径。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/6.html</guid><pubDate>Fri, 30 Aug 2024 13:08:33 +0000</pubDate></item><item><title>【闲聊】关于我这几天遇到的离谱的事</title><link>https://blog.adouzi.eu.org/post/5.html</link><description>7月29日，我的通知书和笔记本到了&#13;
还有一些其它的东西也陆陆续续到，这是故事的开始&#13;
笔记本到后我开始折腾，我先是把D盘删了拓展C盘（这是第一个错误的决定）&#13;
然后把虚拟内存关了，然后就开始出bug了&#13;
然后我做了一个更炸裂的决定——更新系统&#13;
然后……后面的问题就救不回来了……&#13;
win的管理器打不开，设置卡死，就算开虚拟内存也卡死&#13;
这时候win自带的恢复已经救不回来了……&#13;
我就想着干脆重装吧，干成win10&#13;
但是翻遍了家里没翻出u盘，甚至读卡器也没有&#13;
（但凡这里还有别的分区我都不需要折腾，但是win的磁盘管理器寄了，不能进行压缩卷）&#13;
于是向哥们江湖救急的借来了读卡器&#13;
![Screenshot_2024-08-08-17-53-32-099_com tencent mo](https://github.com/user-attachments/assets/62ac263c-7595-4171-bbcd-fe4d3a92fe51)&#13;
顺便手机电池也到了，一起来换&#13;
&#13;
当读卡器到后我使用ventory重装，因为不熟悉bios还折腾了一会&#13;
这时候看到的报错，我以为是启动顺序问题折腾了一会（其实是不支持ventory）&#13;
然后我想到了一个朴实无华的办法，讲我台式机的固态拆下来给笔记本装系统&#13;
深思熟虑就拆开后盖，拔掉电池放电15s开始换&#13;
然后…固态盘位螺丝拧不开，又小又紧（我螺丝刀也很小不好发力）&#13;
然后我想到了个馊主意，直接插上去不拧螺丝&#13;
插上去后进bios改启动项成功进入系统，按照正常来说故事到这里就该结束了对吧，但是还有离谱的事&#13;
我随便下了个软件重装，然后tnd把我c盘也格式化了！！！&#13;
系统也没装好（千万别随便用网上下的小软件重装，你永远不知道它会做什么离谱的操作）&#13;
我发现后笑容逐渐消失，可用空间九百多g，意识到事情不对了&#13;
于是将台式机固态拆出看看数据还能不能救一波&#13;
我先是翻出了一个机械硬盘，先用ventory把win10装进去&#13;
看到熟悉的“海内存知己，天涯若比邻”的时候我就知道成了&#13;
再用恢复软件扫了一下固态，好吧，很干净，啥都没了……&#13;
之后就是漫长的装机了，我之后发现笔记本那边ventory是加载了的，只是启动失败了…&#13;
于是找了烧录工具将电脑店的pe烧录进去，有引导，启动失败&#13;
我意识到了我的思路没有问题，于是尝试换pe&#13;
这里有个意外的事，123网盘那时候被标记成诈骗网站，我镜像在上边……&#13;
只能去找别的了，我找到了firepe，成功引导，装机成功&#13;
之后又换回了ventory给台式机装win10（为啥么换回这个呢？因为有报错）&#13;
但是换回之后还是报错，我只能说，C，启动项忘改了&#13;
之后装好win10成功下车&#13;
然后继续折腾笔记本了&#13;
win10占用相比11少了很多，但是我又又又遇到了问题&#13;
亮度调不了了！&#13;
后面补了独显驱动后还是不行，然后我去更新系统，还是不行……&#13;
得，继续折腾&#13;
后面发现开独显直连能解决&#13;
但是我核显呢？继续折腾，发现是核显没装驱动&#13;
（我使用的是xxx一键安装的驱动，压根没想过是因为这个……）&#13;
因为之前开了独显直连，现在关了，颜色不对了&#13;
我发现amd驱动拉起来后开hdr颜色会好些，但是还是有点问题&#13;
（系统启动后会自动拉起，但是颜色不对，我手动打开后颜色又正常，莫名其妙）&#13;
然后我就在想，我在哪改了颜色配置……&#13;
然后把显卡驱动重装，还是不行&#13;
嗯……很难受，解决了一个又来一个&#13;
之后我找到了机械革命控制台，真相了，我在这改了个鲜艳&#13;
但是关了后还是不正常…&#13;
又研究了会，发现有个校正颜色，校正后正常了，但是独显直连的时候又不正常&#13;
……，真tm莫名其妙啊&#13;
然后就开独显直连养老了&#13;
&#13;
---&#13;
&#13;
总结：&#13;
过于依赖现代工具。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/5.html</guid><pubDate>Thu, 08 Aug 2024 11:04:15 +0000</pubDate></item><item><title>我的alist自定义css</title><link>https://blog.adouzi.eu.org/post/4.html</link><description>一键抄作业，将以下代码复制进alist自定义头部即可&#13;
&#13;
```css&#13;
&lt;style&gt;&#13;
html, body {&#13;
    /* 设置页面背景图片，并使其固定在中心位置，不随滚动条移动 */&#13;
    background: url('https://api.adou-web.eu.org/?id=background_mobile') no-repeat center center fixed;&#13;
    /* 背景图片覆盖整个视窗 */&#13;
    background-size: cover;&#13;
    /* 设置全局字体颜色 */&#13;
    color: #333;&#13;
    /* 设置全局行高 */&#13;
    line-height: 1.6;&#13;
    /* 设置全局字体 */&#13;
    font-family: 'LXGW WenKai', sans-serif;&#13;
    /* 设置全局字体加粗 */&#13;
    font-weight: bold;&#13;
    /* 添加背景过渡效果 */&#13;
    transition: background 0.3s ease;&#13;
}&#13;
&#13;
/* 响应式设计 - 手机尺寸 */&#13;
@media screen and (min-width: 320px) and (max-width: 767px) {&#13;
    html, body {&#13;
        /* 设置手机尺寸下的背景图片 */&#13;
        background: url('https://api.adou-web.eu.org/?id=background_mobile') no-repeat center center fixed;&#13;
    }&#13;
}&#13;
&#13;
/* 响应式设计 - 平板尺寸 */&#13;
@media screen and (min-width: 768px) and (max-width: 1024px) {&#13;
    html, body {&#13;
        /* 设置平板尺寸下的背景图片 */&#13;
        background: url('https://api.adou-web.eu.org/?id=background_tablet') no-repeat center center fixed;&#13;
    }&#13;
}&#13;
&#13;
/* 响应式设计 - 大屏幕设备尺寸 */&#13;
@media screen and (min-width: 1025px) {&#13;
    html, body {&#13;
        /* 设置大屏幕尺寸下的背景图片 */&#13;
        background: url('https://api.adouzi.eu.org/?id=background_pc') no-repeat center center fixed;&#13;
    }&#13;
}&#13;
&#13;
/* 设置透明度和背景颜色 */&#13;
.obj-box, .hope-c-PJLV {&#13;
    /* 设置元素背景颜色及透明度 */&#13;
    background-color: rgba(0, 0, 0, 0.1) !important;&#13;
    /* 设置元素圆角 */&#13;
    border-radius: 6px;&#13;
    /* 添加背景颜色过渡效果 */&#13;
    transition: background-color 0.3s ease;&#13;
}&#13;
&#13;
.obj-box:hover, .hope-c-PJLV:hover {&#13;
    /* 设置元素悬停时的背景颜色及透明度 */&#13;
    background-color: rgba(0, 0, 0, 0.3) !important;&#13;
}&#13;
&#13;
/* 白天模式下的样式 */&#13;
.hope-ui-light .obj-box, .hope-ui-light .hope-c-PJLV {&#13;
    /* 设置白天模式下元素的背景颜色及透明度 */&#13;
    background-color: rgba(255, 255, 255, 0.1) !important;&#13;
}&#13;
&#13;
.hope-ui-light .obj-box:hover, .hope-ui-light .hope-c-PJLV:hover {&#13;
    /* 设置白天模式下元素悬停时的背景颜色及透明度 */&#13;
    background-color: rgba(255, 255, 255, 0.3) !important;&#13;
}&#13;
&#13;
/* 代码块的样式 */&#13;
.hope-ui-light pre, .hope-ui-dark pre {&#13;
    /* 设置代码块的背景颜色及透明度 */&#13;
    background-color: rgba(255, 255, 255, 0.3) !important;&#13;
    /* 设置代码块的圆角 */&#13;
    border-radius: 6px;&#13;
}&#13;
&#13;
/* 顶部右上角切换按钮及右下角侧边栏按钮的样式 */&#13;
.hope-icon-button, .hope-c-PJLV-ijgzmFG-css {&#13;
    /* 设置按钮的背景颜色及透明度 */&#13;
    background-color: rgba(255, 255, 255, 0.1) !important;&#13;
    /* 设置按钮的圆角 */&#13;
    border-radius: 6px;&#13;
    /* 添加背景颜色过渡效果 */&#13;
    transition: background-color 0.3s ease;&#13;
}&#13;
&#13;
.hope-icon-button:hover, .hope-c-PJLV-ijgzmFG-css:hover {&#13;
    /* 设置按钮悬停时的背景颜色及透明度 */&#13;
    background-color: rgba(255, 255, 255, 0.3) !important;&#13;
}&#13;
&#13;
/* 评论系统的样式 */&#13;
.newValine {&#13;
    /* 设置评论区宽度 */&#13;
    width: min(96%, 940px);&#13;
    /* 设置评论区的方向为纵向 */&#13;
    flex-direction: column;&#13;
    /* 设置评论区行间距 */&#13;
    row-gap: var(--hope-space-2);&#13;
    /* 设置评论区圆角 */&#13;
    border-radius: var(--hope-radii-xl);&#13;
    /* 设置评论区内边距 */&#13;
    padding: var(--hope-space-2);&#13;
    /* 设置评论区阴影 */&#13;
    box-shadow: var(--hope-shadows-lg);&#13;
    /* 添加背景颜色过渡效果 */&#13;
    transition: background-color 0.3s ease;&#13;
}&#13;
&#13;
/* 白天模式下的评论区样式 */&#13;
.hope-ui-light .newValine {&#13;
    /* 设置白天模式下评论区的背景颜色及透明度 */&#13;
    background-color: rgba(255, 255, 255, 0.1) !important;&#13;
}&#13;
&#13;
/* 夜间模式下的评论区样式 */&#13;
.hope-ui-dark .newValine {&#13;
    /* 设置夜间模式下评论区的背景颜色及透明度 */&#13;
    background-color: rgba(0, 0, 0, 0.1) !important;&#13;
}&#13;
&#13;
/* 输入栏背景图样式 */&#13;
.vedit {&#13;
    /* 设置输入栏背景图片 */&#13;
    background-image: url(https://cdn.jsdelivr.net/gh/anwen-anyi/imgAnwen/images/OuNiJiang.gif);&#13;
    /* 设置背景图片的大小 */&#13;
    background-size: contain;&#13;
    /* 设置背景图片不重复 */&#13;
    background-repeat: no-repeat;&#13;
    /* 设置背景图片的位置 */&#13;
    background-position: right bottom;&#13;
    /* 添加过渡效果 */&#13;
    transition: all 0.25s ease-in-out 0s;&#13;
}&#13;
&#13;
textarea#comment-textarea:focus {&#13;
    /* 设置输入框获得焦点时背景图片的位置 */&#13;
    background-position-y: 120px;&#13;
    /* 添加过渡效果 */&#13;
    transition: all 0.25s ease-in-out 0s;&#13;
}&#13;
&#13;
/* 底部样式 */&#13;
.dibu {&#13;
    /* 设置底部边框 */&#13;
    border-top: 0;&#13;
    /* 设置底部位置 */&#13;
    position: absolute;&#13;
    bottom: 0;&#13;
    /* 设置底部宽度 */&#13;
    width: 100%;&#13;
    /* 设置底部外边距 */&#13;
    margin: 0;&#13;
    /* 设置底部内边距 */&#13;
    padding: 0;&#13;
}&#13;
&#13;
/* App区域样式 */&#13;
.App {&#13;
    /* 设置App区域最小高度 */&#13;
    min-height: 85vh;&#13;
}&#13;
&#13;
/* 表格样式 */&#13;
.table {&#13;
    /* 设置表格居中 */&#13;
    margin: auto;&#13;
}&#13;
&#13;
/* 渐变背景样式 */&#13;
#canvas-basic {&#13;
    /* 设置渐变背景的固定位置 */&#13;
    position: fixed;&#13;
    /* 设置渐变背景的显示属性 */&#13;
    display: block;&#13;
    /* 设置渐变背景的宽度 */&#13;
    width: 100%;&#13;
    /* 设置渐变背景的高度 */&#13;
    height: 100%;&#13;
    /* 设置渐变背景的上下左右位置 */&#13;
    top: 0;&#13;
    right: 0;&#13;
    bottom: 0;&#13;
    left: 0;&#13;
    /* 设置渐变背景的层叠顺序 */&#13;
    z-index: -999;&#13;
}&#13;
&lt;/style&gt;&#13;
&#13;
```&#13;
&#13;
注释是GPT写的，真方便（。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/4.html</guid><pubDate>Sun, 28 Jul 2024 13:30:10 +0000</pubDate></item><item><title>解决 FreshRSS 订阅源添加失败问题</title><link>https://blog.adouzi.eu.org/post/3.html</link><description>在使用 FreshRSS 订阅 RSS 源时，我遇到了一个问题：订阅源添加失败，并且日志中提示 SSL 证书问题。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/3.html</guid><pubDate>Sat, 27 Jul 2024 09:28:00 +0000</pubDate></item><item><title>Windwos下PHP操作MySQL数据库奇慢无比</title><link>https://blog.adouzi.eu.org/post/2.html</link><description># Windwos下PHP操作MySQL数据库奇慢无比问题解决&#13;
&#13;
笔者写的一个 API 涉及数据库操作，延迟竟然达到了惊人的 2 秒多，放到网站上直接导致超时。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/2.html</guid><pubDate>Fri, 19 Jul 2024 11:46:45 +0000</pubDate></item><item><title>关于我</title><link>https://blog.adouzi.eu.org/post/1.html</link><description># 关于&#13;
&#13;
以前的网名阿豆子，现叫白綾乃（shiraayano）&#13;
&#13;
00后 江西 性格：INTP 喜欢摸鱼&#13;
&#13;
热爱二次元、喜欢音乐、喜欢看小说，喜欢百合（对变嫁有精神洁癖）&#13;
&#13;
喜欢V家的曲子 [歌单](https://space.bilibili.com/501101402/favlist?fid=999147302&amp;ftype=create)&#13;
&#13;
会写一些代码，学的比较杂&#13;
&#13;
**联系方式：**&#13;
&#13;
- Email：adouzi@adouzi.eu.org&#13;
- BiliBili：[白綾乃](https://space.bilibili.com/501101402)&#13;
- Github：[shiraayano](https://github.com/shiraayano/)&#13;
- 个人主页：[adouzi.eu.org](https://adouzi.eu.org)&#13;
。</description><guid isPermaLink="true">https://blog.adouzi.eu.org/post/1.html</guid><pubDate>Tue, 16 Jul 2024 12:39:03 +0000</pubDate></item></channel></rss>